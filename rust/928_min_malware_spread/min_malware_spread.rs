/*
 * @Date: 2024-04-17
 * @LastEditors: 854284842@qq.com
 * @LastEditTime: 2024-04-17
 * @FilePath: /algorithm/rust/928_min_malware_spread/min_malware_spread.rs
 */

struct Solution;

impl Solution {
    fn dfs(graph: &Vec<Vec<i32>>, initial_set: &Vec<i32>, infected_set: &mut Vec<i32>, v: usize) {
        let n = graph.len() as i32;
        for u in 0..n as usize {
            if graph[v][u] == 0 || initial_set[u] == 1 || infected_set[u] == 1 {
                continue;
            }
            infected_set[u] = 1;
            Self::dfs(graph, initial_set, infected_set, u);
        }
    }

    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {
        let n = graph.len();
        let mut initial_set: Vec<i32> = vec![0; n];
        for &v in initial.iter() {
            initial_set[v as usize] = 1;
        }

        let mut infected_by: Vec<Vec<i32>> = vec![Vec::new(); n];
        for &v in initial.iter() {
            let mut infected_set: Vec<i32> = vec![0; n];
            Self::dfs(&graph, &initial_set, &mut infected_set, v as usize);
            for u in 0..n {
                if infected_set[u] == 1 {
                    infected_by[u].push(v);
                }
            }
        }

        let mut count: Vec<i32> = vec![0; n];
        for u in 0..n {
            if infected_by[u].len() == 1 {
                count[infected_by[u][0] as usize] += 1;
            }
        }
        let mut res = initial[0];
        for &v in initial.iter() {
            if count[v as usize] > count[res as usize]
                || count[v as usize] == count[res as usize] && v < res
            {
                res = v;
            }
        }
        return res;
    }
}

fn main() {
    let tests = vec![
        (
            vec![vec![1, 1, 0], vec![1, 1, 0], vec![0, 0, 1]],
            vec![0, 1],
            0,
        ),
        (
            vec![vec![1, 1, 0], vec![1, 1, 1], vec![0, 1, 1]],
            vec![0, 1],
            1,
        ),
        (
            vec![
                vec![1, 1, 0, 0],
                vec![1, 1, 1, 0],
                vec![0, 1, 1, 1],
                vec![0, 0, 1, 1],
            ],
            vec![0, 1],
            1,
        ),
    ];

    for (graph, initial, ans) in tests {
        assert_eq!(Solution::min_malware_spread(graph, initial), ans);
    }
}
