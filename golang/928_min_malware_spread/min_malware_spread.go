/*
 * @Date: 2024-04-17
 * @LastEditors: 854284842@qq.com
 * @LastEditTime: 2024-04-17
 * @FilePath: /algorithm/golang/928_min_malware_spread/min_malware_spread.go
 */

// Package main ...
package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func dfs(graph [][]int, initialSet, infectedSet []int, v int) {
	n := len(graph)
	for u := 0; u < n; u++ {
		if graph[v][u] == 0 || initialSet[u] == 1 || infectedSet[u] == 1 {
			continue
		}
		infectedSet[u] = 1
		dfs(graph, initialSet, infectedSet, u)
	}
}

func minMalwareSpread(graph [][]int, initial []int) int {
	n := len(graph)
	initialSet := make([]int, n)
	for _, v := range initial {
		initialSet[v] = 1
	}
	infectedBy := make([][]int, n)
	for _, v := range initial {
		infectedSet := make([]int, n)
		dfs(graph, initialSet, infectedSet, v)
		for u := 0; u < n; u++ {
			if infectedSet[u] == 1 {
				infectedBy[u] = append(infectedBy[u], v)
			}
		}
	}
	count := make([]int, n)
	for u := 0; u < n; u++ {
		if len(infectedBy[u]) == 1 {
			count[infectedBy[u][0]]++
		}
	}
	res := initial[0]
	for _, v := range initial {
		if count[v] > count[res] || count[v] == count[res] && v < res {
			res = v
		}
	}
	return res
}

func main() {
	tests := []struct {
		graph   [][]int
		initial []int
		ans     int
	}{
		{[][]int{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}}, []int{0, 1}, 0},
		{[][]int{{1, 1, 0}, {1, 1, 1}, {0, 1, 1}}, []int{0, 1}, 1},
		{[][]int{{1, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 1, 1}, {0, 0, 1, 1}}, []int{0, 1}, 1},
	}

	for index, test := range tests {
		assert.Equal(&testing.T{}, test.ans, minMalwareSpread(test.graph, test.initial), index)
	}
}
