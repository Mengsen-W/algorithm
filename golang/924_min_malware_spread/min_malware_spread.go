/*
 * @Date: 2024-04-16
 * @LastEditors: 854284842@qq.com
 * @LastEditTime: 2024-04-16
 * @FilePath: /algorithm/golang/924_min_malware_spread/min_malware_spread.go
 */

// Package main ...
package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func minMalwareSpread(graph [][]int, initial []int) int {
	n := len(graph)
	ids := make([]int, n)
	idToSize := make(map[int]int)
	id := 0
	for i := range ids {
		if ids[i] == 0 {
			id++
			ids[i] = id
			size := 1
			q := []int{i}
			for len(q) > 0 {
				u := q[0]
				q = q[1:]
				for v := range graph[u] {
					if ids[v] == 0 && graph[u][v] == 1 {
						size++
						q = append(q, v)
						ids[v] = id
					}
				}
			}
			idToSize[id] = size
		}
	}
	idToInitials := make(map[int]int)
	for _, u := range initial {
		idToInitials[ids[u]]++
	}
	ans := n + 1
	ansRemoved := 0
	for _, u := range initial {
		removed := 0
		if idToInitials[ids[u]] == 1 {
			removed = idToSize[ids[u]]
		}
		if removed > ansRemoved || (removed == ansRemoved && u < ans) {
			ans, ansRemoved = u, removed
		}
	}
	return ans
}

func main() {
	tests := []struct {
		graph   [][]int
		initial []int
		ans     int
	}{
		{[][]int{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}}, []int{0, 1}, 0},
		{[][]int{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, []int{0, 2}, 0},
		{[][]int{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}, []int{1, 2}, 1},
	}

	for index, test := range tests {
		assert.Equal(&testing.T{}, test.ans, minMalwareSpread(test.graph, test.initial), index)
	}
}
